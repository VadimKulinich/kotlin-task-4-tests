plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id "org.sonarqube" version "2.7"
}

apply plugin: 'jacoco'

group 'org.example'
version '1.0-SNAPSHOT'

def junitVersion = '4.12'
def jacocoVersion = '0.8.2'
def nameResultDirectory = 'buildReports'
def teacherTestSuite = "teacher*SuiteTest"
def reportFileExtension = 'report'
def nameTeacherTestResultDirectory = 'teacherTestReports'
def packageForTeacherTest = '**/teacher**'
def excludeClasses = ['/kotlin/test/**']


repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    testCompile group: 'junit', name: 'junit', version: junitVersion
}

task buildProject(dependsOn: ['allProjectClear', 'build', 'jacocoTestReport', 'runTeacherTests'])

task allProjectClear {
    delete file('build')
    mkdir nameResultDirectory
    file(nameResultDirectory).listFiles().each { file ->
        def nameFile = file.name
        if (!reportFileExtension.equals(nameFile.substring(nameFile.indexOf(".") + 1))) {
            delete file.getAbsolutePath()
        }
    }
}

task runTeacherTests(type: Test) {
    filter {
        includeTestsMatching teacherTestSuite
    }
    reports {
        junitXml.enabled = true
        junitXml.destination file("${nameResultDirectory}/${nameTeacherTestResultDirectory}")
        html.enabled = false
    }
}
jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    test {
        exclude packageForTeacherTest
    }
    reports {
        xml.enabled = true
        xml.destination file("${nameResultDirectory}/jacocoTestReport.xml")
        csv.enabled = false
        html.enabled = false
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludeClasses)
        })  //this task is excluding the classes for coverage
    }
}


test {
    reports {
        junitXml.enabled = false
        html.enabled = false
    }
}

allprojects { project ->
    tasks.withType(Test) { testTask ->
        testTask.testLogging { logging ->
            events = []
        }
        ignoreFailures = true
    }
}

